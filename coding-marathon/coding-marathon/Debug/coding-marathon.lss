
coding-marathon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000654  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000586  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028b  00000000  00000000  00000dde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000106c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035a  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bb  00000000  00000000  000013ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#define F_CPU 8000000UL
#include <util/delay.h>

int main(void) {
	DDRB = 0xFF; // Set PORTB as output
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	ADCSRA = (1 << ADEN) | 0x06; // Enable ADC, prescaler = 64
  70:	96 e8       	ldi	r25, 0x86	; 134
  72:	96 b9       	out	0x06, r25	; 6
	
	unsigned int count = 0;
	unsigned int previous_val = 0;
	PORTB = 0xff;
  74:	88 bb       	out	0x18, r24	; 24
int main(void) {
	DDRB = 0xFF; // Set PORTB as output
	ADCSRA = (1 << ADEN) | 0x06; // Enable ADC, prescaler = 64
	
	unsigned int count = 0;
	unsigned int previous_val = 0;
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	30 e0       	ldi	r19, 0x00	; 0

int main(void) {
	DDRB = 0xFF; // Set PORTB as output
	ADCSRA = (1 << ADEN) | 0x06; // Enable ADC, prescaler = 64
	
	unsigned int count = 0;
  7a:	e0 e0       	ldi	r30, 0x00	; 0
  7c:	f0 e0       	ldi	r31, 0x00	; 0
	unsigned int previous_val = 0;
	PORTB = 0xff;

	while (1) {
		// Start ADC conversion
		ADMUX = 0x40; // AVCC as reference, Channel 0
  7e:	80 e4       	ldi	r24, 0x40	; 64
  80:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= (1 << ADSC); // Start conversion
  82:	86 b1       	in	r24, 0x06	; 6
  84:	80 64       	ori	r24, 0x40	; 64
  86:	86 b9       	out	0x06, r24	; 6
		while (ADCSRA & (1 << ADSC)); // Wait for completion
  88:	36 99       	sbic	0x06, 6	; 6
  8a:	fe cf       	rjmp	.-4      	; 0x88 <main+0x1c>
		unsigned int val = ADC; // Read ADC value
  8c:	c4 b1       	in	r28, 0x04	; 4
  8e:	d5 b1       	in	r29, 0x05	; 5
		
		// Detect obstruction (rising edge)
		if (val >= 400 && previous_val < 400) {
  90:	c0 39       	cpi	r28, 0x90	; 144
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	d8 07       	cpc	r29, r24
  96:	20 f0       	brcs	.+8      	; 0xa0 <main+0x34>
  98:	20 39       	cpi	r18, 0x90	; 144
  9a:	31 40       	sbci	r19, 0x01	; 1
  9c:	08 f4       	brcc	.+2      	; 0xa0 <main+0x34>
			count++; // Increment count
  9e:	31 96       	adiw	r30, 0x01	; 1
		}
		previous_val = val; // Update previous value
		
		// Convert count to BCD and display on PORTB
		unsigned char tens = count / 10;
  a0:	9f 01       	movw	r18, r30
  a2:	ad ec       	ldi	r26, 0xCD	; 205
  a4:	bc ec       	ldi	r27, 0xCC	; 204
  a6:	0e 94 80 00 	call	0x100	; 0x100 <__umulhisi3>
  aa:	ac 01       	movw	r20, r24
  ac:	56 95       	lsr	r21
  ae:	47 95       	ror	r20
  b0:	56 95       	lsr	r21
  b2:	47 95       	ror	r20
  b4:	56 95       	lsr	r21
  b6:	47 95       	ror	r20
		unsigned char ones = count % 10;
  b8:	9a 01       	movw	r18, r20
  ba:	22 0f       	add	r18, r18
  bc:	33 1f       	adc	r19, r19
  be:	ca 01       	movw	r24, r20
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	82 0f       	add	r24, r18
  ce:	93 1f       	adc	r25, r19
  d0:	9f 01       	movw	r18, r30
  d2:	28 1b       	sub	r18, r24
  d4:	39 0b       	sbc	r19, r25
		PORTB = ~((tens << 4) | ones); // High nibble: tens, Low nibble: ones
  d6:	55 27       	eor	r21, r21
  d8:	42 95       	swap	r20
  da:	52 95       	swap	r21
  dc:	50 7f       	andi	r21, 0xF0	; 240
  de:	54 27       	eor	r21, r20
  e0:	40 7f       	andi	r20, 0xF0	; 240
  e2:	54 27       	eor	r21, r20
  e4:	42 2b       	or	r20, r18
  e6:	40 95       	com	r20
  e8:	48 bb       	out	0x18, r20	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	3f ef       	ldi	r19, 0xFF	; 255
  ec:	81 ee       	ldi	r24, 0xE1	; 225
  ee:	94 e0       	ldi	r25, 0x04	; 4
  f0:	31 50       	subi	r19, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x84>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x8e>
  fa:	00 00       	nop
		
		// Detect obstruction (rising edge)
		if (val >= 400 && previous_val < 400) {
			count++; // Increment count
		}
		previous_val = val; // Update previous value
  fc:	9e 01       	movw	r18, r28
  fe:	bf cf       	rjmp	.-130    	; 0x7e <main+0x12>

00000100 <__umulhisi3>:
 100:	a2 9f       	mul	r26, r18
 102:	b0 01       	movw	r22, r0
 104:	b3 9f       	mul	r27, r19
 106:	c0 01       	movw	r24, r0
 108:	a3 9f       	mul	r26, r19
 10a:	70 0d       	add	r23, r0
 10c:	81 1d       	adc	r24, r1
 10e:	11 24       	eor	r1, r1
 110:	91 1d       	adc	r25, r1
 112:	b2 9f       	mul	r27, r18
 114:	70 0d       	add	r23, r0
 116:	81 1d       	adc	r24, r1
 118:	11 24       	eor	r1, r1
 11a:	91 1d       	adc	r25, r1
 11c:	08 95       	ret

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
